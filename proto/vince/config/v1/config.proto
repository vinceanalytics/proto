
syntax = "proto3";
package v1;

import "google/protobuf/duration.proto";
import "buf/validate/validate.proto";

// Configuration object for vince instance
message Config {
  // Path to the main badger database.
  string db_path = 1 [ (buf.validate.field).required = true ];

  // Path to where block files are stored. Blocks are stored as files with ULID
  // as filenames
  BlockStore blocks_store = 2 [ (buf.validate.field).required = true ];

  // host:port to bind for http api. This is used by serve command. The server
  // serves ui console
  string listen_address = 3 [ (buf.validate.field).required = true ];

  // Control how much is logged options are
  string log_level = 4 [
    (buf.validate.field).string.in = "debug",
    (buf.validate.field).string.in = "info",
    (buf.validate.field).string.in = "warn",
    (buf.validate.field).string.in = "error"
  ];

  // Expose /debug/pprof endpoint when serving
  bool enable_profile = 6;

  // host:port to bind myslq server. Serves web analytics via MySQL compliant
  // wire protocol.
  string mysql_listen_address = 7 [ (buf.validate.field).required = true ];

  string tls_cert_file = 8;
  string tls_key_file = 9;

  int64 events_buffer_size = 10;

  repeated Notifier notifiers = 11;

  string server_id = 12;

  repeated string allowed_origins = 14;

  // Ed5519 private key used for generating and verifying jwt tokens.
  SecretKey secret_key = 15 [ (buf.validate.field).required = true ];

  Env env = 16 [ (buf.validate.field).required = true ];

  enum Env {
    unknown = 0;
    dev = 1;
    staging = 2;
    production = 3;
  }
  // ED25519 private key used for generating JWT tokens.
  message SecretKey {
    // pem encoded PRIVATE KEY
    oneof value {
      // Environment variable that key will be read from. The value of the env
      // variable must be base64 encoded.
      string env = 1;

      // Path to file on disk that contains the secret.
      string file = 2;

      // base64 encoded string of the key
      string raw = 3;
    }
  }
  message Notifier {
    string name = 1;
    oneof provider {
      Email email = 2;
      Webhook webhook = 3;
    }
  }

  message Email {
    string to = 1;
    string from = 2;
    string hello = 3;
    string host_port = 4;
    string auth_username = 5;
    string auth_password = 6;
    string auth_secret = 7;
    string auth_identity = 8;
    map<string, string> headers = 9;
    string html = 10;
    string text = 11;
    bool require_tls = 12;
    HTTP.TLSConfig tls_config = 13;
  }

  message Webhook {
    HTTP http_config = 1;
    string url = 2;
  }

  message HTTP {
    BasicAuth basic_auth = 1;
    Authorization authorization = 2;
    OAuth2 pauth2 = 3;
    TLSConfig tls_config = 4;

    message BasicAuth {
      string username = 1;
      string password = 2;
    }
    message Authorization {
      string type = 1;
      string credentials = 2;
    }
    message OAuth2 {
      string client_id = 1;
      string client_secret = 2;
      repeated string client_scopes = 3;
      string token_url = 4;
      map<string, string> endpoint_params = 5;
      TLSConfig tls_config = 6;
    }

    message TLSConfig {
      string key_file = 1;
      string cert_file = 2;
      bool insecure_skip_verify = 3;
    }
  }
}

message ClusterConfig {
  string name = 1;
  map<string, Node> nodes = 2;

  message Node {
    Client.Auth account = 1;
    // True if this node is used to bootstrap the cluster.
    bool bootstrap = 2;
    string address = 3;
  }
}

message Client {
  bytes private_key = 1;

  // Authentication details of vince instances
  map<string, Instance> instance = 2;

  // Map of server_id to instance
  map<string, string> server_id = 3;

  // The default auth name to use.
  Active active = 4;

  map<string, ClusterConfig> clusters = 5;

  message Instance { map<string, Auth> accounts = 1; }

  message Active {
    string instance = 1;
    string account = 2;
  }
  message Auth {
    string name = 1;
    string access_token = 2;
    string rerfresh_token = 3;
    string server_id = 4;
  }
}

message BlockStore {
  oneof provider {
    option (buf.validate.oneof).required = true;

    Filesystem fs = 1;
    S3 s3 = 2;
    Azure azure = 3;
    BOS bos = 4;
    COS cos = 5;
    GCS gcs = 6;
    OBS obs = 7;
    OSS oss = 8;
  }
  string cache_dir = 9 [ (buf.validate.field).required = true ];

  message OSS {
    string endpoint = 1;
    string bucket = 2;
    string access_key_id = 3;
    string access_key_secret = 4;
  }
  message OBS {
    string bucket = 1;
    string endpoint = 2;
    string access_key = 3;
    string secret_key = 4;
  }

  message GCS {
    string bucket = 1;
    string service_account = 2;
  }

  message COS {
    string bucket = 1;
    string region = 2;
    string app_id = 3;
    string endpoint = 4;
    string secret_key = 5;
    string secret_id = 6;
  }

  message BOS {
    string bucket = 1;
    string endpoint = 2;
    string access_key = 3;
    string secret_key = 4;
  }
  message Azure {
    string storage_account = 1;
    string storage_account_key = 2;
    string storage_connection_string = 3;
    string container = 4;
    string endpoint = 5;
    string user_assigned_id = 6;
    int32 max_retries = 7;
    Reader reader_config = 8;
    Pipeline pipeline_config = 9;

    message Reader { int32 max_retry_requests = 1; }

    message Pipeline {
      int32 max_tries = 1;
      google.protobuf.Duration try_timeout = 2;
      google.protobuf.Duration retry_delay = 3;
      google.protobuf.Duration max_retry_delay = 4;
    }
  }
  message Filesystem { string directory = 1; }

  message S3 {
    string bucket = 1;
    string endpoint = 2;
    string region = 3;
    bool aws_sdk_auth = 4;
    string access_key = 5;
    bool insecure = 6;
    bool signature_version2 = 7;
    string secret_key = 8;
    string session_token = 9;
    map<string, string> put_user_metadata = 10;
    string list_objects_version = 11;
    BucketLookupType bucket_lookup_type = 12;
    uint64 part_size = 13;
    SSE sse_config = 14;
    string sts_endpoint = 15;

    message SSE {
      string type = 1;
      string kms_key_id = 2;
      map<string, string> kms_encryption_context = 3;
      string encryption_key = 4;
    }
    enum BucketLookupType {
      AUTO = 0;
      VIRTUAL_HOSTED = 1;
      PATH = 2;
    }
  }
}

message Build {
  string version = 1;
  string server_id = 2;
}
