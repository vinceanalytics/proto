syntax = "proto3";
package v1;

import "google/protobuf/duration.proto";

// StorePrefix defines different kind of data we are storing in the key value
// store.
enum StorePrefix {
  SITES = 0;
  ALERTS = 2;
  ACCOUNT = 3;
  TOKEN = 4;
  CLUSTER = 8;
  BLOCK_METADATA = 9;
  BLOCK_INDEX = 10;
  OAUTH_CLIENT = 11;
  OAUTH_AUTHORIZE = 12;
  OAUTH_ACCESS = 13;
  OAUTH_REFRESH = 14;
  SNIPPET = 15;
  IMPORT = 16;
}

message StoreKey {
  string namespace = 1;
  StorePrefix prefix = 2;
}

// Parquet fields used to store events. There are only two phisical data types
// int64 and string.
//
// The columns are grouped by data types for easy access
enum Column {
  bounce = 0;
  duration = 1;
  id = 2;
  session = 3;
  timestamp = 4;

  browser = 5;
  browser_version = 6;
  city = 7;
  country = 8;
  domain = 9;
  entry_page = 10;
  event = 11;
  exit_page = 12;
  host = 13;
  os = 14;
  os_version = 15;
  path = 16;
  referrer = 17;
  referrer_source = 18;
  region = 19;
  screen = 20;
  utm_campaign = 21;
  utm_content = 22;
  utm_medium = 23;
  utm_source = 24;
  utm_term = 25;
}

service Storage {
  rpc NewTransaction(NewTransactionRequest) returns (Transaction);
  rpc Set(SetRequest) returns (SetResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc Close(Transaction) returns (CloseResult);
  rpc Iter(stream IterRequest) returns (stream IterStep);
}

message Transaction { bytes id = 1; }

message NewTransactionRequest { bool update = 1; }

message SetRequest {
  Transaction txn = 1;
  bytes key = 2;
  bytes value = 3;
  google.protobuf.Duration ttl = 4;
}

message SetResponse {}

message GetRequest {
  Transaction txn = 1;
  bytes key = 2;
}

message GetResponse { bytes value = 1; }

message DeleteRequest {
  Transaction txn = 1;
  bytes key = 2;
}

message DeleteResponse {}

message CloseResult {}

message IterOption {
  Transaction txn = 1;
  bytes prefix = 2;
  bool reverse = 3;
  uint32 batch = 4;
}

message IterRequest {
  oneof command {
    uint32 batch = 2;
    IterOption setup = 3;
  }
}

message IterStep { repeated KeyValue items = 1; }

message KeyValue {
  bytes key = 1;
  bytes value = 2;
}