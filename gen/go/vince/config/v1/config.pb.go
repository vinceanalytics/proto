// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: vince/config/v1/config.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config_Env int32

const (
	Config_unknown    Config_Env = 0
	Config_dev        Config_Env = 1
	Config_staging    Config_Env = 2
	Config_production Config_Env = 3
)

// Enum value maps for Config_Env.
var (
	Config_Env_name = map[int32]string{
		0: "unknown",
		1: "dev",
		2: "staging",
		3: "production",
	}
	Config_Env_value = map[string]int32{
		"unknown":    0,
		"dev":        1,
		"staging":    2,
		"production": 3,
	}
)

func (x Config_Env) Enum() *Config_Env {
	p := new(Config_Env)
	*p = x
	return p
}

func (x Config_Env) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_Env) Descriptor() protoreflect.EnumDescriptor {
	return file_vince_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (Config_Env) Type() protoreflect.EnumType {
	return &file_vince_config_v1_config_proto_enumTypes[0]
}

func (x Config_Env) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_Env.Descriptor instead.
func (Config_Env) EnumDescriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 0}
}

type BlockStore_S3_BucketLookupType int32

const (
	BlockStore_S3_AUTO           BlockStore_S3_BucketLookupType = 0
	BlockStore_S3_VIRTUAL_HOSTED BlockStore_S3_BucketLookupType = 1
	BlockStore_S3_PATH           BlockStore_S3_BucketLookupType = 2
)

// Enum value maps for BlockStore_S3_BucketLookupType.
var (
	BlockStore_S3_BucketLookupType_name = map[int32]string{
		0: "AUTO",
		1: "VIRTUAL_HOSTED",
		2: "PATH",
	}
	BlockStore_S3_BucketLookupType_value = map[string]int32{
		"AUTO":           0,
		"VIRTUAL_HOSTED": 1,
		"PATH":           2,
	}
)

func (x BlockStore_S3_BucketLookupType) Enum() *BlockStore_S3_BucketLookupType {
	p := new(BlockStore_S3_BucketLookupType)
	*p = x
	return p
}

func (x BlockStore_S3_BucketLookupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockStore_S3_BucketLookupType) Descriptor() protoreflect.EnumDescriptor {
	return file_vince_config_v1_config_proto_enumTypes[1].Descriptor()
}

func (BlockStore_S3_BucketLookupType) Type() protoreflect.EnumType {
	return &file_vince_config_v1_config_proto_enumTypes[1]
}

func (x BlockStore_S3_BucketLookupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockStore_S3_BucketLookupType.Descriptor instead.
func (BlockStore_S3_BucketLookupType) EnumDescriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 7, 0}
}

// Configuration object for vince instance
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the main badger database.
	DbPath string `protobuf:"bytes,1,opt,name=db_path,json=dbPath,proto3" json:"db_path,omitempty"`
	// Path to where block files are stored. Blocks are stored as files with ULID
	// as filenames
	BlocksStore *BlockStore `protobuf:"bytes,2,opt,name=blocks_store,json=blocksStore,proto3" json:"blocks_store,omitempty"`
	// host:port to bind for http api. This is used by serve command. The server
	// serves ui console
	ListenAddress string `protobuf:"bytes,3,opt,name=listen_address,json=listenAddress,proto3" json:"listen_address,omitempty"`
	// Control how much is logged options are
	LogLevel string `protobuf:"bytes,4,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// Expose /debug/pprof endpoint when serving
	EnableProfile bool `protobuf:"varint,6,opt,name=enable_profile,json=enableProfile,proto3" json:"enable_profile,omitempty"`
	// host:port to bind myslq server. Serves web analytics via MySQL compliant
	// wire protocol.
	MysqlListenAddress string             `protobuf:"bytes,7,opt,name=mysql_listen_address,json=mysqlListenAddress,proto3" json:"mysql_listen_address,omitempty"`
	TlsCertFile        string             `protobuf:"bytes,8,opt,name=tls_cert_file,json=tlsCertFile,proto3" json:"tls_cert_file,omitempty"`
	TlsKeyFile         string             `protobuf:"bytes,9,opt,name=tls_key_file,json=tlsKeyFile,proto3" json:"tls_key_file,omitempty"`
	EventsBufferSize   int64              `protobuf:"varint,10,opt,name=events_buffer_size,json=eventsBufferSize,proto3" json:"events_buffer_size,omitempty"`
	Notifiers          []*Config_Notifier `protobuf:"bytes,11,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	ServerId           string             `protobuf:"bytes,12,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	RaftPath           string             `protobuf:"bytes,13,opt,name=raft_path,json=raftPath,proto3" json:"raft_path,omitempty"`
	AllowedOrigins     []string           `protobuf:"bytes,14,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	// Ed5519 private key used for generating and verifying jwt tokens.
	SecretKey *Config_SecretKey `protobuf:"bytes,15,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Env       Config_Env        `protobuf:"varint,16,opt,name=env,proto3,enum=v1.Config_Env" json:"env,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetDbPath() string {
	if x != nil {
		return x.DbPath
	}
	return ""
}

func (x *Config) GetBlocksStore() *BlockStore {
	if x != nil {
		return x.BlocksStore
	}
	return nil
}

func (x *Config) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *Config) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Config) GetEnableProfile() bool {
	if x != nil {
		return x.EnableProfile
	}
	return false
}

func (x *Config) GetMysqlListenAddress() string {
	if x != nil {
		return x.MysqlListenAddress
	}
	return ""
}

func (x *Config) GetTlsCertFile() string {
	if x != nil {
		return x.TlsCertFile
	}
	return ""
}

func (x *Config) GetTlsKeyFile() string {
	if x != nil {
		return x.TlsKeyFile
	}
	return ""
}

func (x *Config) GetEventsBufferSize() int64 {
	if x != nil {
		return x.EventsBufferSize
	}
	return 0
}

func (x *Config) GetNotifiers() []*Config_Notifier {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *Config) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *Config) GetRaftPath() string {
	if x != nil {
		return x.RaftPath
	}
	return ""
}

func (x *Config) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *Config) GetSecretKey() *Config_SecretKey {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *Config) GetEnv() Config_Env {
	if x != nil {
		return x.Env
	}
	return Config_unknown
}

type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nodes map[string]*ClusterConfig_Node `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterConfig) GetNodes() map[string]*ClusterConfig_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Authentication details of vince instances
	Instance map[string]*Client_Instance `protobuf:"bytes,2,rep,name=instance,proto3" json:"instance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of server_id to instance
	ServerId map[string]string `protobuf:"bytes,3,rep,name=server_id,json=serverId,proto3" json:"server_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The default auth name to use.
	Active   *Client_Active            `protobuf:"bytes,4,opt,name=active,proto3" json:"active,omitempty"`
	Clusters map[string]*ClusterConfig `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *Client) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *Client) GetInstance() map[string]*Client_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Client) GetServerId() map[string]string {
	if x != nil {
		return x.ServerId
	}
	return nil
}

func (x *Client) GetActive() *Client_Active {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Client) GetClusters() map[string]*ClusterConfig {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type BlockStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Provider:
	//
	//	*BlockStore_Fs
	//	*BlockStore_S3_
	//	*BlockStore_Azure_
	//	*BlockStore_Bos
	//	*BlockStore_Cos
	//	*BlockStore_Gcs
	//	*BlockStore_Obs
	//	*BlockStore_Oss
	Provider isBlockStore_Provider `protobuf_oneof:"provider"`
	CacheDir string                `protobuf:"bytes,9,opt,name=cache_dir,json=cacheDir,proto3" json:"cache_dir,omitempty"`
}

func (x *BlockStore) Reset() {
	*x = BlockStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore) ProtoMessage() {}

func (x *BlockStore) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore.ProtoReflect.Descriptor instead.
func (*BlockStore) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (m *BlockStore) GetProvider() isBlockStore_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *BlockStore) GetFs() *BlockStore_Filesystem {
	if x, ok := x.GetProvider().(*BlockStore_Fs); ok {
		return x.Fs
	}
	return nil
}

func (x *BlockStore) GetS3() *BlockStore_S3 {
	if x, ok := x.GetProvider().(*BlockStore_S3_); ok {
		return x.S3
	}
	return nil
}

func (x *BlockStore) GetAzure() *BlockStore_Azure {
	if x, ok := x.GetProvider().(*BlockStore_Azure_); ok {
		return x.Azure
	}
	return nil
}

func (x *BlockStore) GetBos() *BlockStore_BOS {
	if x, ok := x.GetProvider().(*BlockStore_Bos); ok {
		return x.Bos
	}
	return nil
}

func (x *BlockStore) GetCos() *BlockStore_COS {
	if x, ok := x.GetProvider().(*BlockStore_Cos); ok {
		return x.Cos
	}
	return nil
}

func (x *BlockStore) GetGcs() *BlockStore_GCS {
	if x, ok := x.GetProvider().(*BlockStore_Gcs); ok {
		return x.Gcs
	}
	return nil
}

func (x *BlockStore) GetObs() *BlockStore_OBS {
	if x, ok := x.GetProvider().(*BlockStore_Obs); ok {
		return x.Obs
	}
	return nil
}

func (x *BlockStore) GetOss() *BlockStore_OSS {
	if x, ok := x.GetProvider().(*BlockStore_Oss); ok {
		return x.Oss
	}
	return nil
}

func (x *BlockStore) GetCacheDir() string {
	if x != nil {
		return x.CacheDir
	}
	return ""
}

type isBlockStore_Provider interface {
	isBlockStore_Provider()
}

type BlockStore_Fs struct {
	Fs *BlockStore_Filesystem `protobuf:"bytes,1,opt,name=fs,proto3,oneof"`
}

type BlockStore_S3_ struct {
	S3 *BlockStore_S3 `protobuf:"bytes,2,opt,name=s3,proto3,oneof"`
}

type BlockStore_Azure_ struct {
	Azure *BlockStore_Azure `protobuf:"bytes,3,opt,name=azure,proto3,oneof"`
}

type BlockStore_Bos struct {
	Bos *BlockStore_BOS `protobuf:"bytes,4,opt,name=bos,proto3,oneof"`
}

type BlockStore_Cos struct {
	Cos *BlockStore_COS `protobuf:"bytes,5,opt,name=cos,proto3,oneof"`
}

type BlockStore_Gcs struct {
	Gcs *BlockStore_GCS `protobuf:"bytes,6,opt,name=gcs,proto3,oneof"`
}

type BlockStore_Obs struct {
	Obs *BlockStore_OBS `protobuf:"bytes,7,opt,name=obs,proto3,oneof"`
}

type BlockStore_Oss struct {
	Oss *BlockStore_OSS `protobuf:"bytes,8,opt,name=oss,proto3,oneof"`
}

func (*BlockStore_Fs) isBlockStore_Provider() {}

func (*BlockStore_S3_) isBlockStore_Provider() {}

func (*BlockStore_Azure_) isBlockStore_Provider() {}

func (*BlockStore_Bos) isBlockStore_Provider() {}

func (*BlockStore_Cos) isBlockStore_Provider() {}

func (*BlockStore_Gcs) isBlockStore_Provider() {}

func (*BlockStore_Obs) isBlockStore_Provider() {}

func (*BlockStore_Oss) isBlockStore_Provider() {}

type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *Build) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Build) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

// ED25519 private key used for generating JWT tokens.
type Config_SecretKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pem encoded PRIVATE KEY
	//
	// Types that are assignable to Value:
	//
	//	*Config_SecretKey_Env
	//	*Config_SecretKey_File
	//	*Config_SecretKey_Raw
	Value isConfig_SecretKey_Value `protobuf_oneof:"value"`
}

func (x *Config_SecretKey) Reset() {
	*x = Config_SecretKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_SecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_SecretKey) ProtoMessage() {}

func (x *Config_SecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_SecretKey.ProtoReflect.Descriptor instead.
func (*Config_SecretKey) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Config_SecretKey) GetValue() isConfig_SecretKey_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Config_SecretKey) GetEnv() string {
	if x, ok := x.GetValue().(*Config_SecretKey_Env); ok {
		return x.Env
	}
	return ""
}

func (x *Config_SecretKey) GetFile() string {
	if x, ok := x.GetValue().(*Config_SecretKey_File); ok {
		return x.File
	}
	return ""
}

func (x *Config_SecretKey) GetRaw() string {
	if x, ok := x.GetValue().(*Config_SecretKey_Raw); ok {
		return x.Raw
	}
	return ""
}

type isConfig_SecretKey_Value interface {
	isConfig_SecretKey_Value()
}

type Config_SecretKey_Env struct {
	// Environment variable that key will be read from. The value of the env
	// variable must be base64 encoded.
	Env string `protobuf:"bytes,1,opt,name=env,proto3,oneof"`
}

type Config_SecretKey_File struct {
	// Path to file on disk that contains the secret.
	File string `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type Config_SecretKey_Raw struct {
	// base64 encoded string of the key
	Raw string `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

func (*Config_SecretKey_Env) isConfig_SecretKey_Value() {}

func (*Config_SecretKey_File) isConfig_SecretKey_Value() {}

func (*Config_SecretKey_Raw) isConfig_SecretKey_Value() {}

type Config_Notifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*Config_Notifier_Email
	//	*Config_Notifier_Webhook
	Provider isConfig_Notifier_Provider `protobuf_oneof:"provider"`
}

func (x *Config_Notifier) Reset() {
	*x = Config_Notifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Notifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Notifier) ProtoMessage() {}

func (x *Config_Notifier) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Notifier.ProtoReflect.Descriptor instead.
func (*Config_Notifier) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_Notifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Config_Notifier) GetProvider() isConfig_Notifier_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *Config_Notifier) GetEmail() *Config_Email {
	if x, ok := x.GetProvider().(*Config_Notifier_Email); ok {
		return x.Email
	}
	return nil
}

func (x *Config_Notifier) GetWebhook() *Config_Webhook {
	if x, ok := x.GetProvider().(*Config_Notifier_Webhook); ok {
		return x.Webhook
	}
	return nil
}

type isConfig_Notifier_Provider interface {
	isConfig_Notifier_Provider()
}

type Config_Notifier_Email struct {
	Email *Config_Email `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type Config_Notifier_Webhook struct {
	Webhook *Config_Webhook `protobuf:"bytes,3,opt,name=webhook,proto3,oneof"`
}

func (*Config_Notifier_Email) isConfig_Notifier_Provider() {}

func (*Config_Notifier_Webhook) isConfig_Notifier_Provider() {}

type Config_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To           string                 `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	From         string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Hello        string                 `protobuf:"bytes,3,opt,name=hello,proto3" json:"hello,omitempty"`
	HostPort     string                 `protobuf:"bytes,4,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	AuthUsername string                 `protobuf:"bytes,5,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword string                 `protobuf:"bytes,6,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	AuthSecret   string                 `protobuf:"bytes,7,opt,name=auth_secret,json=authSecret,proto3" json:"auth_secret,omitempty"`
	AuthIdentity string                 `protobuf:"bytes,8,opt,name=auth_identity,json=authIdentity,proto3" json:"auth_identity,omitempty"`
	Headers      map[string]string      `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Html         string                 `protobuf:"bytes,10,opt,name=html,proto3" json:"html,omitempty"`
	Text         string                 `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	RequireTls   bool                   `protobuf:"varint,12,opt,name=require_tls,json=requireTls,proto3" json:"require_tls,omitempty"`
	TlsConfig    *Config_HTTP_TLSConfig `protobuf:"bytes,13,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *Config_Email) Reset() {
	*x = Config_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Email) ProtoMessage() {}

func (x *Config_Email) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Email.ProtoReflect.Descriptor instead.
func (*Config_Email) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Config_Email) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Config_Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Config_Email) GetHello() string {
	if x != nil {
		return x.Hello
	}
	return ""
}

func (x *Config_Email) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *Config_Email) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *Config_Email) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *Config_Email) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

func (x *Config_Email) GetAuthIdentity() string {
	if x != nil {
		return x.AuthIdentity
	}
	return ""
}

func (x *Config_Email) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Config_Email) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *Config_Email) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Config_Email) GetRequireTls() bool {
	if x != nil {
		return x.RequireTls
	}
	return false
}

func (x *Config_Email) GetTlsConfig() *Config_HTTP_TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type Config_Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpConfig *Config_HTTP `protobuf:"bytes,1,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	Url        string       `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Config_Webhook) Reset() {
	*x = Config_Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Webhook) ProtoMessage() {}

func (x *Config_Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Webhook.ProtoReflect.Descriptor instead.
func (*Config_Webhook) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Config_Webhook) GetHttpConfig() *Config_HTTP {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *Config_Webhook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Config_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicAuth     *Config_HTTP_BasicAuth     `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3" json:"basic_auth,omitempty"`
	Authorization *Config_HTTP_Authorization `protobuf:"bytes,2,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Pauth2        *Config_HTTP_OAuth2        `protobuf:"bytes,3,opt,name=pauth2,proto3" json:"pauth2,omitempty"`
	TlsConfig     *Config_HTTP_TLSConfig     `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *Config_HTTP) Reset() {
	*x = Config_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP) ProtoMessage() {}

func (x *Config_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP.ProtoReflect.Descriptor instead.
func (*Config_HTTP) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Config_HTTP) GetBasicAuth() *Config_HTTP_BasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *Config_HTTP) GetAuthorization() *Config_HTTP_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Config_HTTP) GetPauth2() *Config_HTTP_OAuth2 {
	if x != nil {
		return x.Pauth2
	}
	return nil
}

func (x *Config_HTTP) GetTlsConfig() *Config_HTTP_TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type Config_HTTP_BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Config_HTTP_BasicAuth) Reset() {
	*x = Config_HTTP_BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_BasicAuth) ProtoMessage() {}

func (x *Config_HTTP_BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_BasicAuth.ProtoReflect.Descriptor instead.
func (*Config_HTTP_BasicAuth) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Config_HTTP_BasicAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_HTTP_BasicAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Config_HTTP_Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *Config_HTTP_Authorization) Reset() {
	*x = Config_HTTP_Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_Authorization) ProtoMessage() {}

func (x *Config_HTTP_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_Authorization.ProtoReflect.Descriptor instead.
func (*Config_HTTP_Authorization) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *Config_HTTP_Authorization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Config_HTTP_Authorization) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type Config_HTTP_OAuth2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret   string                 `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	ClientScopes   []string               `protobuf:"bytes,3,rep,name=client_scopes,json=clientScopes,proto3" json:"client_scopes,omitempty"`
	TokenUrl       string                 `protobuf:"bytes,4,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	EndpointParams map[string]string      `protobuf:"bytes,5,rep,name=endpoint_params,json=endpointParams,proto3" json:"endpoint_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TlsConfig      *Config_HTTP_TLSConfig `protobuf:"bytes,6,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *Config_HTTP_OAuth2) Reset() {
	*x = Config_HTTP_OAuth2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_OAuth2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_OAuth2) ProtoMessage() {}

func (x *Config_HTTP_OAuth2) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_OAuth2.ProtoReflect.Descriptor instead.
func (*Config_HTTP_OAuth2) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *Config_HTTP_OAuth2) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Config_HTTP_OAuth2) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Config_HTTP_OAuth2) GetClientScopes() []string {
	if x != nil {
		return x.ClientScopes
	}
	return nil
}

func (x *Config_HTTP_OAuth2) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *Config_HTTP_OAuth2) GetEndpointParams() map[string]string {
	if x != nil {
		return x.EndpointParams
	}
	return nil
}

func (x *Config_HTTP_OAuth2) GetTlsConfig() *Config_HTTP_TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type Config_HTTP_TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyFile            string `protobuf:"bytes,1,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	CertFile           string `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,3,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
}

func (x *Config_HTTP_TLSConfig) Reset() {
	*x = Config_HTTP_TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_TLSConfig) ProtoMessage() {}

func (x *Config_HTTP_TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_TLSConfig.ProtoReflect.Descriptor instead.
func (*Config_HTTP_TLSConfig) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *Config_HTTP_TLSConfig) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *Config_HTTP_TLSConfig) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Config_HTTP_TLSConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type ClusterConfig_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Client_Auth `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// True if this node is used to bootstrap the cluster.
	Bootstrap bool   `protobuf:"varint,2,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ClusterConfig_Node) Reset() {
	*x = ClusterConfig_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Node) ProtoMessage() {}

func (x *ClusterConfig_Node) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Node.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Node) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ClusterConfig_Node) GetAccount() *Client_Auth {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *ClusterConfig_Node) GetBootstrap() bool {
	if x != nil {
		return x.Bootstrap
	}
	return false
}

func (x *ClusterConfig_Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Client_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts map[string]*Client_Auth `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Client_Instance) Reset() {
	*x = Client_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client_Instance) ProtoMessage() {}

func (x *Client_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client_Instance.ProtoReflect.Descriptor instead.
func (*Client_Instance) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Client_Instance) GetAccounts() map[string]*Client_Auth {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type Client_Active struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Account  string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *Client_Active) Reset() {
	*x = Client_Active{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client_Active) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client_Active) ProtoMessage() {}

func (x *Client_Active) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client_Active.ProtoReflect.Descriptor instead.
func (*Client_Active) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Client_Active) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Client_Active) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type Client_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AccessToken   string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RerfreshToken string `protobuf:"bytes,3,opt,name=rerfresh_token,json=rerfreshToken,proto3" json:"rerfresh_token,omitempty"`
	ServerId      string `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *Client_Auth) Reset() {
	*x = Client_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client_Auth) ProtoMessage() {}

func (x *Client_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client_Auth.ProtoReflect.Descriptor instead.
func (*Client_Auth) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Client_Auth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client_Auth) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Client_Auth) GetRerfreshToken() string {
	if x != nil {
		return x.RerfreshToken
	}
	return ""
}

func (x *Client_Auth) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type BlockStore_OSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint        string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Bucket          string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	AccessKeyId     string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	AccessKeySecret string `protobuf:"bytes,4,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
}

func (x *BlockStore_OSS) Reset() {
	*x = BlockStore_OSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_OSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_OSS) ProtoMessage() {}

func (x *BlockStore_OSS) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_OSS.ProtoReflect.Descriptor instead.
func (*BlockStore_OSS) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *BlockStore_OSS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BlockStore_OSS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BlockStore_OSS) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *BlockStore_OSS) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

type BlockStore_OBS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Endpoint  string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKey string `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *BlockStore_OBS) Reset() {
	*x = BlockStore_OBS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_OBS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_OBS) ProtoMessage() {}

func (x *BlockStore_OBS) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_OBS.ProtoReflect.Descriptor instead.
func (*BlockStore_OBS) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 1}
}

func (x *BlockStore_OBS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BlockStore_OBS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BlockStore_OBS) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *BlockStore_OBS) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type BlockStore_GCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket         string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	ServiceAccount string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *BlockStore_GCS) Reset() {
	*x = BlockStore_GCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_GCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_GCS) ProtoMessage() {}

func (x *BlockStore_GCS) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_GCS.ProtoReflect.Descriptor instead.
func (*BlockStore_GCS) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 2}
}

func (x *BlockStore_GCS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BlockStore_GCS) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type BlockStore_COS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AppId     string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Endpoint  string `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	SecretKey string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SecretId  string `protobuf:"bytes,6,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *BlockStore_COS) Reset() {
	*x = BlockStore_COS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_COS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_COS) ProtoMessage() {}

func (x *BlockStore_COS) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_COS.ProtoReflect.Descriptor instead.
func (*BlockStore_COS) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 3}
}

func (x *BlockStore_COS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BlockStore_COS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BlockStore_COS) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *BlockStore_COS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BlockStore_COS) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *BlockStore_COS) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type BlockStore_BOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Endpoint  string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKey string `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *BlockStore_BOS) Reset() {
	*x = BlockStore_BOS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_BOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_BOS) ProtoMessage() {}

func (x *BlockStore_BOS) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_BOS.ProtoReflect.Descriptor instead.
func (*BlockStore_BOS) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 4}
}

func (x *BlockStore_BOS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BlockStore_BOS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BlockStore_BOS) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *BlockStore_BOS) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type BlockStore_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageAccount          string                     `protobuf:"bytes,1,opt,name=storage_account,json=storageAccount,proto3" json:"storage_account,omitempty"`
	StorageAccountKey       string                     `protobuf:"bytes,2,opt,name=storage_account_key,json=storageAccountKey,proto3" json:"storage_account_key,omitempty"`
	StorageConnectionString string                     `protobuf:"bytes,3,opt,name=storage_connection_string,json=storageConnectionString,proto3" json:"storage_connection_string,omitempty"`
	Container               string                     `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	Endpoint                string                     `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	UserAssignedId          string                     `protobuf:"bytes,6,opt,name=user_assigned_id,json=userAssignedId,proto3" json:"user_assigned_id,omitempty"`
	MaxRetries              int32                      `protobuf:"varint,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	ReaderConfig            *BlockStore_Azure_Reader   `protobuf:"bytes,8,opt,name=reader_config,json=readerConfig,proto3" json:"reader_config,omitempty"`
	PipelineConfig          *BlockStore_Azure_Pipeline `protobuf:"bytes,9,opt,name=pipeline_config,json=pipelineConfig,proto3" json:"pipeline_config,omitempty"`
}

func (x *BlockStore_Azure) Reset() {
	*x = BlockStore_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_Azure) ProtoMessage() {}

func (x *BlockStore_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_Azure.ProtoReflect.Descriptor instead.
func (*BlockStore_Azure) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 5}
}

func (x *BlockStore_Azure) GetStorageAccount() string {
	if x != nil {
		return x.StorageAccount
	}
	return ""
}

func (x *BlockStore_Azure) GetStorageAccountKey() string {
	if x != nil {
		return x.StorageAccountKey
	}
	return ""
}

func (x *BlockStore_Azure) GetStorageConnectionString() string {
	if x != nil {
		return x.StorageConnectionString
	}
	return ""
}

func (x *BlockStore_Azure) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *BlockStore_Azure) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BlockStore_Azure) GetUserAssignedId() string {
	if x != nil {
		return x.UserAssignedId
	}
	return ""
}

func (x *BlockStore_Azure) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *BlockStore_Azure) GetReaderConfig() *BlockStore_Azure_Reader {
	if x != nil {
		return x.ReaderConfig
	}
	return nil
}

func (x *BlockStore_Azure) GetPipelineConfig() *BlockStore_Azure_Pipeline {
	if x != nil {
		return x.PipelineConfig
	}
	return nil
}

type BlockStore_Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *BlockStore_Filesystem) Reset() {
	*x = BlockStore_Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_Filesystem) ProtoMessage() {}

func (x *BlockStore_Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_Filesystem.ProtoReflect.Descriptor instead.
func (*BlockStore_Filesystem) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 6}
}

func (x *BlockStore_Filesystem) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type BlockStore_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket             string                         `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Endpoint           string                         `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Region             string                         `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	AwsSdkAuth         bool                           `protobuf:"varint,4,opt,name=aws_sdk_auth,json=awsSdkAuth,proto3" json:"aws_sdk_auth,omitempty"`
	AccessKey          string                         `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	Insecure           bool                           `protobuf:"varint,6,opt,name=insecure,proto3" json:"insecure,omitempty"`
	SignatureVersion2  bool                           `protobuf:"varint,7,opt,name=signature_version2,json=signatureVersion2,proto3" json:"signature_version2,omitempty"`
	SecretKey          string                         `protobuf:"bytes,8,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SessionToken       string                         `protobuf:"bytes,9,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	PutUserMetadata    map[string]string              `protobuf:"bytes,10,rep,name=put_user_metadata,json=putUserMetadata,proto3" json:"put_user_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ListObjectsVersion string                         `protobuf:"bytes,11,opt,name=list_objects_version,json=listObjectsVersion,proto3" json:"list_objects_version,omitempty"`
	BucketLookupType   BlockStore_S3_BucketLookupType `protobuf:"varint,12,opt,name=bucket_lookup_type,json=bucketLookupType,proto3,enum=v1.BlockStore_S3_BucketLookupType" json:"bucket_lookup_type,omitempty"`
	PartSize           uint64                         `protobuf:"varint,13,opt,name=part_size,json=partSize,proto3" json:"part_size,omitempty"`
	SseConfig          *BlockStore_S3_SSE             `protobuf:"bytes,14,opt,name=sse_config,json=sseConfig,proto3" json:"sse_config,omitempty"`
	StsEndpoint        string                         `protobuf:"bytes,15,opt,name=sts_endpoint,json=stsEndpoint,proto3" json:"sts_endpoint,omitempty"`
}

func (x *BlockStore_S3) Reset() {
	*x = BlockStore_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_S3) ProtoMessage() {}

func (x *BlockStore_S3) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_S3.ProtoReflect.Descriptor instead.
func (*BlockStore_S3) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 7}
}

func (x *BlockStore_S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BlockStore_S3) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BlockStore_S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BlockStore_S3) GetAwsSdkAuth() bool {
	if x != nil {
		return x.AwsSdkAuth
	}
	return false
}

func (x *BlockStore_S3) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *BlockStore_S3) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *BlockStore_S3) GetSignatureVersion2() bool {
	if x != nil {
		return x.SignatureVersion2
	}
	return false
}

func (x *BlockStore_S3) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *BlockStore_S3) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *BlockStore_S3) GetPutUserMetadata() map[string]string {
	if x != nil {
		return x.PutUserMetadata
	}
	return nil
}

func (x *BlockStore_S3) GetListObjectsVersion() string {
	if x != nil {
		return x.ListObjectsVersion
	}
	return ""
}

func (x *BlockStore_S3) GetBucketLookupType() BlockStore_S3_BucketLookupType {
	if x != nil {
		return x.BucketLookupType
	}
	return BlockStore_S3_AUTO
}

func (x *BlockStore_S3) GetPartSize() uint64 {
	if x != nil {
		return x.PartSize
	}
	return 0
}

func (x *BlockStore_S3) GetSseConfig() *BlockStore_S3_SSE {
	if x != nil {
		return x.SseConfig
	}
	return nil
}

func (x *BlockStore_S3) GetStsEndpoint() string {
	if x != nil {
		return x.StsEndpoint
	}
	return ""
}

type BlockStore_Azure_Reader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRetryRequests int32 `protobuf:"varint,1,opt,name=max_retry_requests,json=maxRetryRequests,proto3" json:"max_retry_requests,omitempty"`
}

func (x *BlockStore_Azure_Reader) Reset() {
	*x = BlockStore_Azure_Reader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_Azure_Reader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_Azure_Reader) ProtoMessage() {}

func (x *BlockStore_Azure_Reader) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_Azure_Reader.ProtoReflect.Descriptor instead.
func (*BlockStore_Azure_Reader) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (x *BlockStore_Azure_Reader) GetMaxRetryRequests() int32 {
	if x != nil {
		return x.MaxRetryRequests
	}
	return 0
}

type BlockStore_Azure_Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTries      int32                `protobuf:"varint,1,opt,name=max_tries,json=maxTries,proto3" json:"max_tries,omitempty"`
	TryTimeout    *durationpb.Duration `protobuf:"bytes,2,opt,name=try_timeout,json=tryTimeout,proto3" json:"try_timeout,omitempty"`
	RetryDelay    *durationpb.Duration `protobuf:"bytes,3,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`
	MaxRetryDelay *durationpb.Duration `protobuf:"bytes,4,opt,name=max_retry_delay,json=maxRetryDelay,proto3" json:"max_retry_delay,omitempty"`
}

func (x *BlockStore_Azure_Pipeline) Reset() {
	*x = BlockStore_Azure_Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_Azure_Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_Azure_Pipeline) ProtoMessage() {}

func (x *BlockStore_Azure_Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_Azure_Pipeline.ProtoReflect.Descriptor instead.
func (*BlockStore_Azure_Pipeline) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 5, 1}
}

func (x *BlockStore_Azure_Pipeline) GetMaxTries() int32 {
	if x != nil {
		return x.MaxTries
	}
	return 0
}

func (x *BlockStore_Azure_Pipeline) GetTryTimeout() *durationpb.Duration {
	if x != nil {
		return x.TryTimeout
	}
	return nil
}

func (x *BlockStore_Azure_Pipeline) GetRetryDelay() *durationpb.Duration {
	if x != nil {
		return x.RetryDelay
	}
	return nil
}

func (x *BlockStore_Azure_Pipeline) GetMaxRetryDelay() *durationpb.Duration {
	if x != nil {
		return x.MaxRetryDelay
	}
	return nil
}

type BlockStore_S3_SSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	KmsKeyId             string            `protobuf:"bytes,2,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	KmsEncryptionContext map[string]string `protobuf:"bytes,3,rep,name=kms_encryption_context,json=kmsEncryptionContext,proto3" json:"kms_encryption_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EncryptionKey        string            `protobuf:"bytes,4,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
}

func (x *BlockStore_S3_SSE) Reset() {
	*x = BlockStore_S3_SSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vince_config_v1_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStore_S3_SSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStore_S3_SSE) ProtoMessage() {}

func (x *BlockStore_S3_SSE) ProtoReflect() protoreflect.Message {
	mi := &file_vince_config_v1_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStore_S3_SSE.ProtoReflect.Descriptor instead.
func (*BlockStore_S3_SSE) Descriptor() ([]byte, []int) {
	return file_vince_config_v1_config_proto_rawDescGZIP(), []int{3, 7, 1}
}

func (x *BlockStore_S3_SSE) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BlockStore_S3_SSE) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

func (x *BlockStore_S3_SSE) GetKmsEncryptionContext() map[string]string {
	if x != nil {
		return x.KmsEncryptionContext
	}
	return nil
}

func (x *BlockStore_S3_SSE) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

var File_vince_config_v1_config_proto protoreflect.FileDescriptor

var file_vince_config_v1_config_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xce, 0x12, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x06, 0x64, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x1c, 0x72, 0x1a, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x77, 0x61,
	0x72, 0x6e, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x14, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x12, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6c, 0x73,
	0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x72, 0x61, 0x66, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x52, 0x0a,
	0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x84, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x42, 0x0a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0xe6, 0x03, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4d, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x30, 0x0a, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0xd3, 0x06, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x74,
	0x68, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x52, 0x06, 0x70, 0x61, 0x75, 0x74, 0x68, 0x32, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x54, 0x4c,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x43, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x45, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xde,
	0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x0a,
	0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x41, 0x0a, 0x13,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x75, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x38, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x0b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x65,
	0x76, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x22, 0x94, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb4, 0x06, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x50, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4e, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x97, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x4c, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x72, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf2,
	0x15, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x02, 0x66, 0x73, 0x12, 0x23, 0x0a, 0x02, 0x73, 0x33,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x33, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12,
	0x2c, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a,
	0x03, 0x62, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x4f, 0x53, 0x48, 0x00,
	0x52, 0x03, 0x62, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x4f, 0x53, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x12, 0x26, 0x0a,
	0x03, 0x67, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x43, 0x53, 0x48, 0x00,
	0x52, 0x03, 0x67, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x4f, 0x42, 0x53, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x62, 0x73, 0x12, 0x26, 0x0a,
	0x03, 0x6f, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x53, 0x53, 0x48, 0x00,
	0x52, 0x03, 0x6f, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72, 0x1a, 0x89, 0x01, 0x0a, 0x03, 0x4f,
	0x53, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x77, 0x0a, 0x03, 0x4f, 0x42, 0x53, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a,
	0x46, 0x0a, 0x03, 0x47, 0x43, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa4, 0x01, 0x0a, 0x03, 0x43, 0x4f, 0x53, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x77,
	0x0a, 0x03, 0x42, 0x4f, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0xc8, 0x05, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a,
	0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xe2, 0x01,
	0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x41, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x1a, 0x2a, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xff,
	0x07, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x53, 0x64, 0x6b, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x33, 0x2e,
	0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x33, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x33, 0x2e, 0x53, 0x53,
	0x45, 0x52, 0x09, 0x73, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x42, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x8e, 0x02, 0x0a, 0x03, 0x53, 0x53, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x65, 0x0a,
	0x16, 0x6b, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x33,
	0x2e, 0x53, 0x53, 0x45, 0x2e, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x6b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x47, 0x0a, 0x19, 0x4b,
	0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x54, 0x48, 0x10, 0x02,
	0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x05, 0xba, 0x48,
	0x02, 0x08, 0x01, 0x22, 0x3e, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x75, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca,
	0x02, 0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vince_config_v1_config_proto_rawDescOnce sync.Once
	file_vince_config_v1_config_proto_rawDescData = file_vince_config_v1_config_proto_rawDesc
)

func file_vince_config_v1_config_proto_rawDescGZIP() []byte {
	file_vince_config_v1_config_proto_rawDescOnce.Do(func() {
		file_vince_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_vince_config_v1_config_proto_rawDescData)
	})
	return file_vince_config_v1_config_proto_rawDescData
}

var file_vince_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vince_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_vince_config_v1_config_proto_goTypes = []interface{}{
	(Config_Env)(0),                     // 0: v1.Config.Env
	(BlockStore_S3_BucketLookupType)(0), // 1: v1.BlockStore.S3.BucketLookupType
	(*Config)(nil),                      // 2: v1.Config
	(*ClusterConfig)(nil),               // 3: v1.ClusterConfig
	(*Client)(nil),                      // 4: v1.Client
	(*BlockStore)(nil),                  // 5: v1.BlockStore
	(*Build)(nil),                       // 6: v1.Build
	(*Config_SecretKey)(nil),            // 7: v1.Config.SecretKey
	(*Config_Notifier)(nil),             // 8: v1.Config.Notifier
	(*Config_Email)(nil),                // 9: v1.Config.Email
	(*Config_Webhook)(nil),              // 10: v1.Config.Webhook
	(*Config_HTTP)(nil),                 // 11: v1.Config.HTTP
	nil,                                 // 12: v1.Config.Email.HeadersEntry
	(*Config_HTTP_BasicAuth)(nil),       // 13: v1.Config.HTTP.BasicAuth
	(*Config_HTTP_Authorization)(nil),   // 14: v1.Config.HTTP.Authorization
	(*Config_HTTP_OAuth2)(nil),          // 15: v1.Config.HTTP.OAuth2
	(*Config_HTTP_TLSConfig)(nil),       // 16: v1.Config.HTTP.TLSConfig
	nil,                                 // 17: v1.Config.HTTP.OAuth2.EndpointParamsEntry
	nil,                                 // 18: v1.ClusterConfig.NodesEntry
	(*ClusterConfig_Node)(nil),          // 19: v1.ClusterConfig.Node
	nil,                                 // 20: v1.Client.InstanceEntry
	nil,                                 // 21: v1.Client.ServerIdEntry
	nil,                                 // 22: v1.Client.ClustersEntry
	(*Client_Instance)(nil),             // 23: v1.Client.Instance
	(*Client_Active)(nil),               // 24: v1.Client.Active
	(*Client_Auth)(nil),                 // 25: v1.Client.Auth
	nil,                                 // 26: v1.Client.Instance.AccountsEntry
	(*BlockStore_OSS)(nil),              // 27: v1.BlockStore.OSS
	(*BlockStore_OBS)(nil),              // 28: v1.BlockStore.OBS
	(*BlockStore_GCS)(nil),              // 29: v1.BlockStore.GCS
	(*BlockStore_COS)(nil),              // 30: v1.BlockStore.COS
	(*BlockStore_BOS)(nil),              // 31: v1.BlockStore.BOS
	(*BlockStore_Azure)(nil),            // 32: v1.BlockStore.Azure
	(*BlockStore_Filesystem)(nil),       // 33: v1.BlockStore.Filesystem
	(*BlockStore_S3)(nil),               // 34: v1.BlockStore.S3
	(*BlockStore_Azure_Reader)(nil),     // 35: v1.BlockStore.Azure.Reader
	(*BlockStore_Azure_Pipeline)(nil),   // 36: v1.BlockStore.Azure.Pipeline
	nil,                                 // 37: v1.BlockStore.S3.PutUserMetadataEntry
	(*BlockStore_S3_SSE)(nil),           // 38: v1.BlockStore.S3.SSE
	nil,                                 // 39: v1.BlockStore.S3.SSE.KmsEncryptionContextEntry
	(*durationpb.Duration)(nil),         // 40: google.protobuf.Duration
}
var file_vince_config_v1_config_proto_depIdxs = []int32{
	5,  // 0: v1.Config.blocks_store:type_name -> v1.BlockStore
	8,  // 1: v1.Config.notifiers:type_name -> v1.Config.Notifier
	7,  // 2: v1.Config.secret_key:type_name -> v1.Config.SecretKey
	0,  // 3: v1.Config.env:type_name -> v1.Config.Env
	18, // 4: v1.ClusterConfig.nodes:type_name -> v1.ClusterConfig.NodesEntry
	20, // 5: v1.Client.instance:type_name -> v1.Client.InstanceEntry
	21, // 6: v1.Client.server_id:type_name -> v1.Client.ServerIdEntry
	24, // 7: v1.Client.active:type_name -> v1.Client.Active
	22, // 8: v1.Client.clusters:type_name -> v1.Client.ClustersEntry
	33, // 9: v1.BlockStore.fs:type_name -> v1.BlockStore.Filesystem
	34, // 10: v1.BlockStore.s3:type_name -> v1.BlockStore.S3
	32, // 11: v1.BlockStore.azure:type_name -> v1.BlockStore.Azure
	31, // 12: v1.BlockStore.bos:type_name -> v1.BlockStore.BOS
	30, // 13: v1.BlockStore.cos:type_name -> v1.BlockStore.COS
	29, // 14: v1.BlockStore.gcs:type_name -> v1.BlockStore.GCS
	28, // 15: v1.BlockStore.obs:type_name -> v1.BlockStore.OBS
	27, // 16: v1.BlockStore.oss:type_name -> v1.BlockStore.OSS
	9,  // 17: v1.Config.Notifier.email:type_name -> v1.Config.Email
	10, // 18: v1.Config.Notifier.webhook:type_name -> v1.Config.Webhook
	12, // 19: v1.Config.Email.headers:type_name -> v1.Config.Email.HeadersEntry
	16, // 20: v1.Config.Email.tls_config:type_name -> v1.Config.HTTP.TLSConfig
	11, // 21: v1.Config.Webhook.http_config:type_name -> v1.Config.HTTP
	13, // 22: v1.Config.HTTP.basic_auth:type_name -> v1.Config.HTTP.BasicAuth
	14, // 23: v1.Config.HTTP.authorization:type_name -> v1.Config.HTTP.Authorization
	15, // 24: v1.Config.HTTP.pauth2:type_name -> v1.Config.HTTP.OAuth2
	16, // 25: v1.Config.HTTP.tls_config:type_name -> v1.Config.HTTP.TLSConfig
	17, // 26: v1.Config.HTTP.OAuth2.endpoint_params:type_name -> v1.Config.HTTP.OAuth2.EndpointParamsEntry
	16, // 27: v1.Config.HTTP.OAuth2.tls_config:type_name -> v1.Config.HTTP.TLSConfig
	19, // 28: v1.ClusterConfig.NodesEntry.value:type_name -> v1.ClusterConfig.Node
	25, // 29: v1.ClusterConfig.Node.account:type_name -> v1.Client.Auth
	23, // 30: v1.Client.InstanceEntry.value:type_name -> v1.Client.Instance
	3,  // 31: v1.Client.ClustersEntry.value:type_name -> v1.ClusterConfig
	26, // 32: v1.Client.Instance.accounts:type_name -> v1.Client.Instance.AccountsEntry
	25, // 33: v1.Client.Instance.AccountsEntry.value:type_name -> v1.Client.Auth
	35, // 34: v1.BlockStore.Azure.reader_config:type_name -> v1.BlockStore.Azure.Reader
	36, // 35: v1.BlockStore.Azure.pipeline_config:type_name -> v1.BlockStore.Azure.Pipeline
	37, // 36: v1.BlockStore.S3.put_user_metadata:type_name -> v1.BlockStore.S3.PutUserMetadataEntry
	1,  // 37: v1.BlockStore.S3.bucket_lookup_type:type_name -> v1.BlockStore.S3.BucketLookupType
	38, // 38: v1.BlockStore.S3.sse_config:type_name -> v1.BlockStore.S3.SSE
	40, // 39: v1.BlockStore.Azure.Pipeline.try_timeout:type_name -> google.protobuf.Duration
	40, // 40: v1.BlockStore.Azure.Pipeline.retry_delay:type_name -> google.protobuf.Duration
	40, // 41: v1.BlockStore.Azure.Pipeline.max_retry_delay:type_name -> google.protobuf.Duration
	39, // 42: v1.BlockStore.S3.SSE.kms_encryption_context:type_name -> v1.BlockStore.S3.SSE.KmsEncryptionContextEntry
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_vince_config_v1_config_proto_init() }
func file_vince_config_v1_config_proto_init() {
	if File_vince_config_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vince_config_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_SecretKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Notifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_OAuth2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client_Active); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_OSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_OBS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_GCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_COS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_BOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_Azure_Reader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_Azure_Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vince_config_v1_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStore_S3_SSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vince_config_v1_config_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*BlockStore_Fs)(nil),
		(*BlockStore_S3_)(nil),
		(*BlockStore_Azure_)(nil),
		(*BlockStore_Bos)(nil),
		(*BlockStore_Cos)(nil),
		(*BlockStore_Gcs)(nil),
		(*BlockStore_Obs)(nil),
		(*BlockStore_Oss)(nil),
	}
	file_vince_config_v1_config_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Config_SecretKey_Env)(nil),
		(*Config_SecretKey_File)(nil),
		(*Config_SecretKey_Raw)(nil),
	}
	file_vince_config_v1_config_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Config_Notifier_Email)(nil),
		(*Config_Notifier_Webhook)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vince_config_v1_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vince_config_v1_config_proto_goTypes,
		DependencyIndexes: file_vince_config_v1_config_proto_depIdxs,
		EnumInfos:         file_vince_config_v1_config_proto_enumTypes,
		MessageInfos:      file_vince_config_v1_config_proto_msgTypes,
	}.Build()
	File_vince_config_v1_config_proto = out.File
	file_vince_config_v1_config_proto_rawDesc = nil
	file_vince_config_v1_config_proto_goTypes = nil
	file_vince_config_v1_config_proto_depIdxs = nil
}
